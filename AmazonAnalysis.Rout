
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##Libraries##
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(embed)
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(ggmosaic)
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> library(discrim) # for naive bayes

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> library(themis) # for unbalanced data (smote, upsample, downsample)
> 
> ##Read In Data##
> amazon_test <- vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazon_train <- vroom("train.csv")  %>%
+   mutate(ACTION = as.factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> ## EDA
> 
> # box plot
> ggplot(amazon_train) +
+   geom_boxplot(aes(x = ACTION, y = ROLE_TITLE))
> 
> # counts
> amazon_train %>%
+   group_by(ROLE_FAMILY) %>%
+   summarize(total = n(),
+          YES = sum(ACTION == 1),
+          NO = sum(ACTION == 0),
+          frac = YES/total)
# A tibble: 67 × 5
   ROLE_FAMILY total   YES    NO  frac
         <dbl> <int> <int> <int> <dbl>
 1        3130   146   141     5 0.966
 2        4673   384   332    52 0.865
 3        6725    98    97     1 0.990
 4       19721  2636  2393   243 0.908
 5       19793   362   303    59 0.837
 6      117887  2400  2302    98 0.959
 7      118131   160   137    23 0.856
 8      118205   449   423    26 0.942
 9      118295   493   469    24 0.951
10      118331   892   841    51 0.943
# ℹ 57 more rows
> # mosaic plot
> ggplot(data=amazon_train) + 
+   geom_mosaic(data = amazon_train, aes(x=product(ROLE_FAMILY), fill=ACTION))
Warning message:
`unite_()` was deprecated in tidyr 1.2.0.
ℹ Please use `unite()` instead.
ℹ The deprecated feature was likely used in the ggmosaic package.
  Please report the issue at <https://github.com/haleyjeppson/ggmosaic>. 
> 
> 
> ## Create Recipe
> 
> my_recipe <- recipe(ACTION~., data=amazon_train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_other(all_nominal_predictors(), threshold = .001) %>%
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
>   #step_dummy(all_nominal_predictors())
> 
> pca_recipe <- recipe(ACTION~., data=amazon_train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_other(all_nominal_predictors(), threshold = .001) %>%
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%
+   step_normalize(all_predictors()) %>%
+   step_pca(all_predictors(), threshold = .9)
> 
> balanced_recipe <- recipe(ACTION~., data=amazon_train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_other(all_nominal_predictors(), threshold = .001) %>%
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%
+   step_normalize(all_predictors()) %>%
+   step_pca(all_predictors(), threshold = .9) %>%
+   step_smote(all_outcomes(), neighbors = 5)
> 
> prep <- prep(pca_recipe)
> baked <- bake(prep, new_data = amazon_train)
> 
> 
> # Logistic Regression -----------------------------------------------------
> 
> log_mod <- logistic_reg() %>% # set logistic regression model
+   set_engine("glm")
> 
> amazon_workflow <- workflow() %>%
+   add_recipe(balanced_recipe) %>%
+   add_model(log_mod) %>%
+   fit(data = amazon_train)
> 
> log_preds <- predict(amazon_workflow,
+                      new_data = amazon_test,
+                      type = "prob")
> 
> final_log_preds <- tibble(id = amazon_test$id,
+                           ACTION = log_preds$.pred_1)
> 
> vroom_write(final_log_preds, "logistic_predictions.csv", delim = ",")
> 
> # Penalized Logistic Regression --------------------------------------------
> 
> pen_mod <- logistic_reg(mixture=tune(),
+                         penalty = tune()) %>%
+   set_engine("glmnet")
> 
> # set workflow
> pen_workflow <- workflow() %>%
+   add_recipe(balanced_recipe) %>%
+   add_model(pen_mod)
> 
> ## Grid of tuning values
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5)
> 
> # split data into folds
> folds <- vfold_cv(amazon_train, v = 10, repeats = 1)
> 
> # run Cross validation
> CV_results <- pen_workflow %>%
+   tune_grid(resamples = folds,
+             grid = tuning_grid,
+             metrics = metric_set(roc_auc))
